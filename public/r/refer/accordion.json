{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "registry/refer/ui/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDownIcon, ChevronRightIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AccordionProps {\n  type?: \"single\" | \"multiple\"\n  collapsible?: boolean\n  defaultValue?: string | string[]\n  value?: string | string[]\n  onValueChange?: (value: string | string[]) => void\n  className?: string\n  children?: React.ReactNode\n}\n\nfunction Accordion({\n  type = \"single\",\n  collapsible,\n  defaultValue,\n  value,\n  onValueChange,\n  className,\n  children,\n  ...props\n}: AccordionProps) {\n  if (type === \"multiple\") {\n    return (\n      <AccordionPrimitive.Root\n        data-slot=\"accordion\"\n        type=\"multiple\"\n        defaultValue={defaultValue as string[]}\n        value={value as string[]}\n        onValueChange={onValueChange as (value: string[]) => void}\n        className={className}\n        {...props}\n      >\n        {children}\n      </AccordionPrimitive.Root>\n    )\n  }\n\n  return (\n    <AccordionPrimitive.Root\n      data-slot=\"accordion\"\n      type=\"single\"\n      collapsible={collapsible}\n      defaultValue={defaultValue as string}\n      value={value as string}\n      onValueChange={onValueChange as (value: string) => void}\n      className={className}\n      {...props}\n    >\n      {children}\n    </AccordionPrimitive.Root>\n  )\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  iconPosition = \"end\",\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger> & {\n  iconPosition?: \"start\" | \"end\"\n}) {\n  const isIconStart = iconPosition === \"start\"\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start gap-2 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50\",\n          isIconStart\n            ? \"justify-start [&[data-state=open]>svg]:rotate-90\"\n            : \"justify-between [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {isIconStart && (\n          <ChevronRightIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-px transition-transform duration-200\" />\n        )}\n        {children}\n        {!isIconStart && (\n          <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-px transition-transform duration-200\" />\n        )}\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:ui"
    }
  ]
}