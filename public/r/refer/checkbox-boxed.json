{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-boxed",
  "type": "registry:ui",
  "registryDependencies": [
    "checkbox",
    "label"
  ],
  "files": [
    {
      "path": "registry/refer/ui/checkbox-boxed.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Checkbox } from \"@/registry/refer/ui/checkbox\"\nimport { Label } from \"@/registry/refer/ui/label\"\n\ninterface CheckboxBoxedProps\n  extends Omit<React.LabelHTMLAttributes<HTMLLabelElement>, \"onChange\"> {\n  className?: string\n  children?: React.ReactNode\n  checked?: boolean\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  value?: string\n  disabled?: boolean\n  defaultChecked?: boolean\n}\n\ninterface CheckboxBoxedSubComponentProps\n  extends React.HTMLAttributes<HTMLParagraphElement> {\n  className?: string\n}\n\nfunction CheckboxBoxed({\n  className,\n  children,\n  checked,\n  onChange,\n  value,\n  disabled = false,\n  defaultChecked = false,\n  ...props\n}: CheckboxBoxedProps) {\n  const id = React.useId()\n  const [internalChecked, setInternalChecked] = React.useState(defaultChecked)\n  const isControlled = checked !== undefined && onChange !== undefined\n  const checkedValue = isControlled ? checked : internalChecked\n\n  return (\n    <Label\n      htmlFor={id}\n      className={cn(\n        \"hover:bg-accent has-[[aria-checked=true]]:border-primary-border has-[[aria-checked=true]]:bg-primary-subtle group flex items-start gap-2 rounded-xl border px-3.5 py-3 has-[[aria-checked=true]]:border-t-[2px] has-[[aria-checked=true]]:pt-[11px] dark:has-[[aria-checked=true]]:border-t-[1px] dark:has-[[aria-checked=true]]:pt-3\",\n        disabled && \"cursor-not-allowed opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <Checkbox\n        id={id}\n        checked={checkedValue}\n        onCheckedChange={(checkedState) => {\n          if (isControlled && onChange) {\n            const syntheticEvent = {\n              target: {\n                checked: checkedState === true,\n                value: value || \"\",\n                type: \"checkbox\",\n              },\n            } as React.ChangeEvent<HTMLInputElement>\n            onChange(syntheticEvent)\n          } else if (!isControlled) {\n            setInternalChecked(checkedState === true)\n          }\n        }}\n        disabled={disabled}\n        value={value}\n      />\n      <div className=\"grid gap-1 font-normal\">{children}</div>\n    </Label>\n  )\n}\n\nfunction CheckboxBoxedTitle({\n  className,\n  ...props\n}: CheckboxBoxedSubComponentProps) {\n  return (\n    <p\n      className={cn(\n        \"group-has-[[aria-checked=true]]:text-primary-content dark:group-has-[[aria-checked=true]]:text-foreground text-sm leading-none font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CheckboxBoxedDescription({\n  className,\n  ...props\n}: CheckboxBoxedSubComponentProps) {\n  return (\n    <p\n      className={cn(\n        \"text-muted-foreground group-has-[[aria-checked=true]]:text-primary-content/80 dark:group-has-[[aria-checked=true]]:text-primary-content text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nCheckboxBoxed.Title = CheckboxBoxedTitle\nCheckboxBoxed.Description = CheckboxBoxedDescription\n\nexport { CheckboxBoxed, CheckboxBoxedTitle, CheckboxBoxedDescription }\n",
      "type": "registry:ui"
    }
  ]
}